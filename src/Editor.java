
import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import java.awt.Color;
import java.awt.Image;
import java.awt.PopupMenu;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JTextPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * 
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Compilador");

        colores();

        NumLinea = new NumeroLinea(txtPEditor);
        spnlEditor.setRowHeaderView(NumLinea);

        ImageIcon imagenN = new ImageIcon(getClass().getResource("IMG/agregar-archivo.png"));
        ImageIcon imagenA = new ImageIcon(getClass().getResource("IMG/abrir-archivo.png"));
        ImageIcon imagenC = new ImageIcon(getClass().getResource("IMG/cerrar-archivo.png"));
        ImageIcon imagenG = new ImageIcon(getClass().getResource("IMG/guardar-archivo.png"));
        ImageIcon imagenGC = new ImageIcon(getClass().getResource("IMG/guardarC-archivo.png"));
        ImageIcon imagenCL = new ImageIcon(getClass().getResource("IMG/compilar-Léxico.png"));
        ImageIcon imagenCS = new ImageIcon(getClass().getResource("IMG/Compilar-Sintáctico.png"));

        Icon imgN = new ImageIcon(imagenN.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
        Icon imgA = new ImageIcon(imagenA.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
        Icon imgC = new ImageIcon(imagenC.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
        Icon imgG = new ImageIcon(imagenG.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
        Icon imgGC = new ImageIcon(imagenGC.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
        Icon imgCL = new ImageIcon(imagenCL.getImage().getScaledInstance(25, 29, Image.SCALE_SMOOTH));
        Icon imgCS = new ImageIcon(imagenCS.getImage().getScaledInstance(25, 29, Image.SCALE_SMOOTH));

        mnuNuevo.setIcon(imgN);
        btnNuevo.setIcon(imgN);
        mnuAbrir.setIcon(imgA);
        btnAbrir.setIcon(imgA);
        mnuCerrar.setIcon(imgC);
        mnuGuardar.setIcon(imgG);
        btnGuardar.setIcon(imgG);
        mnuGuardarC.setIcon(imgGC);
        btnGuardarC.setIcon(imgGC);
        btnAnaLex.setIcon(imgCL);
        btnAnaSin.setIcon(imgCS);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPrinc = new javax.swing.JPanel();
        txtErrores = new javax.swing.JTextField();
        spnlEditor = new javax.swing.JScrollPane();
        txtPEditor = new javax.swing.JTextPane();
        spnlErrores = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGuardarC = new javax.swing.JButton();
        btnAnaSin = new javax.swing.JButton();
        btnAnaLex = new javax.swing.JButton();
        txtToken = new javax.swing.JTextField();
        spnlToken = new javax.swing.JScrollPane();
        txtPToken = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuNuevo = new javax.swing.JMenuItem();
        mnuAbrir = new javax.swing.JMenuItem();
        mnuCerrar = new javax.swing.JMenuItem();
        mnuGuardar = new javax.swing.JMenuItem();
        mnuGuardarC = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnuLex = new javax.swing.JMenuItem();
        mnuSin = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 204, 255));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        pnlPrinc.setBackground(new java.awt.Color(51, 204, 255));
        pnlPrinc.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtErrores.setEditable(false);
        txtErrores.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtErrores.setText("  ERRORES");
        txtErrores.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtErroresActionPerformed(evt);
            }
        });
        pnlPrinc.add(txtErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 460, 30));

        txtPEditor.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        txtPEditor.setText("#Programa número 1 - Prueba\nIniciarPrograma: Prueba {\nAlexa();\nint: x = 10;\nluz: l1 = true;\nx: x+1;\nAlexa (encender, l1);\n}");
        spnlEditor.setViewportView(txtPEditor);

        pnlPrinc.add(spnlEditor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 460, 300));

        txtPErrores.setEditable(false);
        txtPErrores.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtPErrores.setForeground(new java.awt.Color(255, 0, 0));
        txtPErrores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPErroresMouseClicked(evt);
            }
        });
        spnlErrores.setViewportView(txtPErrores);

        pnlPrinc.add(spnlErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 460, 220));

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNuevo.setBorderPainted(false);
        btnNuevo.setContentAreaFilled(false);
        btnNuevo.setFocusable(false);
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 46, 42));

        btnAbrir.setBorderPainted(false);
        btnAbrir.setContentAreaFilled(false);
        btnAbrir.setFocusable(false);
        btnAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        jPanel1.add(btnAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 46, 42));

        btnGuardar.setBorderPainted(false);
        btnGuardar.setContentAreaFilled(false);
        btnGuardar.setFocusable(false);
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 46, 42));

        btnGuardarC.setBorderPainted(false);
        btnGuardarC.setContentAreaFilled(false);
        btnGuardarC.setFocusable(false);
        btnGuardarC.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardarC.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardarC, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 46, 42));

        btnAnaSin.setBorderPainted(false);
        btnAnaSin.setContentAreaFilled(false);
        btnAnaSin.setFocusable(false);
        btnAnaSin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAnaSin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAnaSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnaSinActionPerformed(evt);
            }
        });
        jPanel1.add(btnAnaSin, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 46, 42));

        btnAnaLex.setBorderPainted(false);
        btnAnaLex.setContentAreaFilled(false);
        btnAnaLex.setFocusable(false);
        btnAnaLex.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAnaLex.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAnaLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnaLexActionPerformed(evt);
            }
        });
        jPanel1.add(btnAnaLex, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, 46, 42));

        pnlPrinc.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 40));

        txtToken.setEditable(false);
        txtToken.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtToken.setText("  TOKEN");
        txtToken.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtToken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTokenActionPerformed(evt);
            }
        });
        pnlPrinc.add(txtToken, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 40, 360, 38));

        txtPToken.setEditable(false);
        txtPToken.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        spnlToken.setViewportView(txtPToken);

        pnlPrinc.add(spnlToken, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 80, 360, 510));

        getContentPane().add(pnlPrinc, java.awt.BorderLayout.CENTER);

        jMenuBar1.setPreferredSize(new java.awt.Dimension(175, 28));

        jMenu1.setText("Archivo   ");

        mnuNuevo.setText("Nuevo");
        mnuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(mnuNuevo);

        mnuAbrir.setText("Abrir");
        mnuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(mnuAbrir);

        mnuCerrar.setText("Cerrar");
        mnuCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCerrarActionPerformed(evt);
            }
        });
        jMenu1.add(mnuCerrar);

        mnuGuardar.setText("Guardar");
        mnuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(mnuGuardar);

        mnuGuardarC.setText("Guardar como");
        mnuGuardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGuardarCActionPerformed(evt);
            }
        });
        jMenu1.add(mnuGuardarC);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Analizar   ");

        mnuLex.setText("Analizador léxico");
        mnuLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLexActionPerformed(evt);
            }
        });
        jMenu3.add(mnuLex);

        mnuSin.setText("Analizador sintáctico");
        mnuSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSinActionPerformed(evt);
            }
        });
        jMenu3.add(mnuSin);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAbrirActionPerformed
        javax.swing.JFileChooser f = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo de texto", "txt");
        f.setFileFilter(filtro);

        String dir = "C:\\Users\\LalokeraXD\\Documents\\NetBeansProjects\\Compilador";
        File directorio = new File(dir);
        f.setCurrentDirectory(directorio);

        if (f.showOpenDialog(this) == APPROVE_OPTION) {
            archivo = f.getSelectedFile().getName();
            try {
                //fbi flujo de bytes de entrada
                java.io.FileInputStream fbi = new FileInputStream(archivo);
                int c;
                String cad = "", linea = "";
                //while ((c = fbi.read()) != -1) {
                //  cad = cad + (char) c;
                //}
                //Flujos de Caracteres
                FileReader fci = new FileReader(archivo);
                BufferedReader bc = new BufferedReader(fci);
                while ((linea = bc.readLine()) != null) {
                    cad = cad + linea + "\n";
                }
                //cad = bc.readLine();
                txtPEditor.setText(cad);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_mnuAbrirActionPerformed

    private void mnuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarActionPerformed
        if (archivo.equals("")) {
            mnuGuardarCActionPerformed(evt);
        }
        try {
            /*Flujos de Bytes
             java.io.FileOutputStream fbs=new java.io.FileOutputStream("Archivo.txt");
             byte b[]=txtPEditor.getText().getBytes();
             fbs.write(b);
             fbs.flush();
             fbs.close();
             */
            //Flujos de Caracteres
            java.io.FileWriter fcs = new java.io.FileWriter(archivo);
            fcs.write(txtPEditor.getText());
            fcs.flush();
            fcs.close();
            JOptionPane.showMessageDialog(null, "Archivo guardado.");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuGuardarActionPerformed

    private void mnuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNuevoActionPerformed
        if (txtPEditor.getText().equals("")) {
            return;
        }
        int op = javax.swing.JOptionPane.showConfirmDialog(this, "Desea guardar?");
        if (op == -1 || op == 2) {
            return;
        } else if (op == 0) {
            mnuGuardarActionPerformed(evt);
        }
        txtPEditor.setText("");
        archivo = "";
    }//GEN-LAST:event_mnuNuevoActionPerformed

    private void mnuGuardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGuardarCActionPerformed
        javax.swing.JFileChooser f = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("TXT", "txt");
        f.setFileFilter(filtro);

        String dir = "C:\\Users\\LalokeraXD\\Documents\\NetBeansProjects\\Compilador";
        File directorio = new File(dir);
        f.setCurrentDirectory(directorio);

        if (f.showSaveDialog(this) == APPROVE_OPTION && f.getFileFilter() == filtro) {
            archivo = f.getSelectedFile().getName() + ".txt";
            mnuGuardarActionPerformed(evt);
        } else {
            showMessageDialog(this, "Solo archivos de texto");
        }
    }//GEN-LAST:event_mnuGuardarCActionPerformed

    private void mnuLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLexActionPerformed
        txtPToken.setText("");
        txtPErrores.setText("");
        txtPErrores.removeAll();
        y = 0;

        if (txtPEditor.getText().replaceAll(" ", "").equalsIgnoreCase("")) {
            showMessageDialog(this, "Campo Vacío.");
            return;
        }

        Analizar();
        for (int i = 0; i < t; i++) {
            if (T[i].getTipo().equals("Error")) {
                if (!T[i].getTk().equals("")) {
                    escError(T[i].getLinea(), T[i].getCaracter(), "Error en la definición del número o identificador.", T, i);
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Compilado correctamente.");

    }//GEN-LAST:event_mnuLexActionPerformed

    private void mnuCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCerrarActionPerformed
        if (archivo == "") {
            mnuGuardarActionPerformed(evt);
        }
        System.exit(0);
    }//GEN-LAST:event_mnuCerrarActionPerformed

    private void mnuSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSinActionPerformed
        mnuLexActionPerformed(evt);

        String contenido = txtPEditor.getText().replace(" ", "");
        String pal = "", c = "";
        String L[] = contenido.split("\n");
        String cad;

        /*for (int j = 0; j < L.length; j++) {
         cad = L[j];         
         for (int i = 0; i < cad.length(); i++) {
         if(cad.matches("\\W*Alexa\\W*") && !cad.matches("\\W*Alexa(ola);\\W*")){
         escError(j+1,i,"Error.");
         }
         }
         }*/
        I = new Identificador[10000];
        j = 0;

        for (int i = 0; i < t; i++) {
            try {
                if (T[i].getTk().equals("Alexa")) {
                    Gram.alexa(T, i + 1);
                }/*else if(T[i].getTk().equalsIgnoreCase("Alexaencender") || T[i].getTk().equalsIgnoreCase("Alexalimpiar")){
                 escError(T[i].getLinea(),T[i].getCaracter(),"Falta paréntesis que abre.",T,i);
                 }*/ else if (T[i].getTk().equals("int")) {
                    if (Gram.decla(T, i + 1, "Entero") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("boolean")) {
                    if (Gram.decla(T, i + 1, "Booleano") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("luz")) {
                    if (Gram.decla(T, i + 1, "Luz") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("bocina")) {
                    if (Gram.decla(T, i + 1, "Bocina") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("camara")) {
                    if (Gram.decla(T, i + 1, "Camara") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("puerta")) {
                    if (Gram.decla(T, i + 1, "Puerta") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("aspersor")) {
                    if (Gram.decla(T, i + 1, "Aspersor") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("juguete")) {
                    if (Gram.decla(T, i + 1, "Juguete") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }
                } else if (T[i].getTk().equals("premio")) {
                    if (Gram.decla(T, i + 1, "Premio") < 0) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Declaración incorrecta.", T, i + 1);
                        j++;
                    }

                } else if (T[i].getTk().equals("if")) {
                    if (Gram.EsIF(T, i + 1) == false) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Sintaxis incorrecta.", T, i);
                    }
                } else if (T[i].getTk().equals("while")) {
                    if (Gram.EsIF(T, i + 1) == false) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Sintaxis incorrecta.", T, i, "While");
                    }
                } else if (T[i].getTk().equals("for")) {
                    if (Gram.EsIF(T, i + 1) == false) {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Sintaxis incorrecta.", T, i, "For");
                    }
                } else if (T[i].getTipo().equals("Identificador") && T[i + 1].getTk().equals(":") && Gram.expE(T, i + 2) < 0) {
                    int k = i;
                    if (Gram.expE(T, i + 2) >= 0) {
                        i = Gram.expE(T, i + 2);
                        System.out.println(T[i]);
                        if (!T[i].getTk().equals(";")) {
                            escError(T[i - 1].getLinea(), T[i].getCaracter(), "Falta punto y coma.", T, k, "Asignación");
                        }
                    } else {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Asignación incorrecta.", T, i);
                    }
                } else if (T[i].getTk().equals("IniciarPrograma")) {
                    if (T[i + 1].getTk().equals(":")) {
                        if (T[i + 2].getTipo().equals("Identificador")) {
                            if (!T[i + 3].getTk().equals("{")) {
                                escError(T[i].getLinea(), T[i].getCaracter(), "Falta llave que abre.", T, i);
                            }
                        } else {
                            escError(T[i].getLinea(), T[i].getCaracter(), "Falta nombre del programa.", T, i);
                        }
                    } else {
                        escError(T[i].getLinea(), T[i].getCaracter(), "Faltan dos puntos.", T, i);
                    }
                } else if (T[i].getTipo().equals("Error")) {
                    if (T[i].getTk().equals("") && !T[i - 1].getTk().equals(";")) {
                        //escError(T[i].getLinea(),T[i].getCaracter(),"Faltan parámetros.");
                    } else {

                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {

            }
        }

        llaves(T, 0, t);
        llaves2(T, 0, t - 1);

        int t2 = 0;
        try {
            while (!I[t2].getId().equals("null")) {
                /*if(I[t2].getTipo().equals("Entero") && !I[t2].getVal().equals("") && !Grafos.esInt(I[t2].getVal())){
                 escError(I[t2].getT().getLinea(),I[t2].getT().getCaracter(),"Valor incompatible.");
                 }else if(I[t2].getTipo().equals("Luz") && !I[t2].getVal().equals("") && !(I[t2].getVal().equals("true") || I[t2].getVal().equals("false"))){
                 escError(I[t2].getT().getLinea(),I[t2].getT().getCaracter(),"Valor incompatible.");
                 }*/
                //System.out.println(I[t2]);
                t2++;
            }
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_mnuSinActionPerformed

    private void btnGuardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCActionPerformed
        mnuGuardarCActionPerformed(evt);
    }//GEN-LAST:event_btnGuardarCActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        mnuGuardarActionPerformed(evt);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        mnuAbrirActionPerformed(evt);
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        mnuNuevoActionPerformed(evt);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtErroresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtErroresActionPerformed

    private void btnAnaSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnaSinActionPerformed
        mnuSinActionPerformed(evt);
    }//GEN-LAST:event_btnAnaSinActionPerformed

    private void btnAnaLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnaLexActionPerformed
        mnuLexActionPerformed(evt);
    }//GEN-LAST:event_btnAnaLexActionPerformed

    private void txtTokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTokenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTokenActionPerformed

    private void txtPErroresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPErroresMouseClicked
        /*Sugerencia sug = new Sugerencia();
         sug.setLocationRelativeTo(null);
         sug.setVisible(true);*/
    }//GEN-LAST:event_txtPErroresMouseClicked

    private void Analizar() {
        String contenido = txtPEditor.getText().replace(" ", "");
        String pal = "", c = "";
        String L[] = contenido.split("\n");
        String cad;
        t = 0;

        /*if(i == L.length-1){
         pal = L[L.length-1].substring(T[t].getCaracter());
         }*/
        for (int j = 0; j < L.length; j++) {
            cad = L[j];
            for (int i = 0; i < cad.length(); i++) {
                c = cad.substring(i, i + 1);
                if (c.equals("#")) {
                    i = cad.length();
                } else if (!c.equals(" ") && esOp(c) == -1 && esSim(c) == -1) {
                    pal = pal + c;
                } else if (!pal.equals(" ")) {
                    if (esPR(pal)) {
                        T[t++] = new Token(pal, "Palabra reservada", j + 1, i - pal.length() + 1);
                    } else if (Grafos.esIde(pal)) {
                        T[t++] = new Token(pal, "Identificador", j + 1, i - pal.length() + 1);
                    } else if (Grafos.esInt(pal)) {
                        T[t++] = new Token(pal, "Entero", j + 1, i - pal.length() + 1);
                    } else if (Grafos.esDecimal(pal)) {
                        T[t++] = new Token(pal, "Decimal", j + 1, i - pal.length() + 1);
                    } else {
                        T[t++] = new Token(pal, "Error", j + 1, i - pal.length() + 1);
                    }

                    if ((esOp(c) == 1 || esOp(c) == 2) && c.equals(cad.substring(i + 1, i + 2)) || (esSim(c) == 6) && c.equals(cad.substring(i + 1, i + 2)) || (esSim(c) == 7) && c.equals(cad.substring(i + 1, i + 2))) {
                        T[t++] = new Token(c + c, "Operador lógico", j + 1, i - pal.length() + 1);
                        if (cad.substring(i + 2, i + 3).equals(";")) {
                            T[t++] = new Token(";", "Símbolo especial", j + 1, i - pal.length() + 1);
                        }
                        i = i + 1;
                    } else if ((esSim(c) == 8 && esOp(cad.substring(i + 1, i + 2)) == 0) || (esOp(c) == 0 && c.equals(cad.substring(i + 1, i + 2)))) {
                        T[t++] = new Token(c + cad.substring(i + 1, i + 2), "Operador relacional", j + 1, i - pal.length() + 1);
                        if (cad.substring(i + 2, i + 3).equals(";")) {
                            T[t++] = new Token(";", "Símbolo especial", j + 1, i - pal.length() + 1);
                        }
                        i = i + 1;
                    } else if ((esSim(c) == 9 && esOp(cad.substring(i + 1, i + 2)) == 0) || (esSim(c) == 10 && esOp(cad.substring(i + 1, i + 2)) == 0)) {
                        T[t++] = new Token(c + cad.substring(i + 1, i + 2), "Operador relacional", j + 1, i - pal.length() + 1);
                        if (cad.substring(i + 2, i + 3).equals(";")) {
                            T[t++] = new Token(";", "Símbolo especial", j + 1, i - pal.length() + 1);
                        }
                        i = i + 1;
                    }/*else if (esOp(c) != -1 && c.equals(cad.substring(i+1, i+2))) {
                     T[t++] = new Token(c+c, "Operador",j+1,i - pal.length());
                     i++;
                     }else if(esOp(c) != -1 && (esSim(cad.substring(i+1, i+2)) != -1)){
                     T[t++] = new Token(c, "Operador",j+1,i - pal.length());
                     T[t++] = new Token(cad.substring(i+1), "símbolo especial",j+1,i + 1 - pal.length());
                     i=i+2;
                     }*/ else if (esOp(c) != -1) {
                        T[t++] = new Token(c, "Operador", j + 1, i - pal.length() + 1);
                    } else if (esSim(c) != -1 && esSim(cad.substring(i + 1)) != -1) {
                        T[t++] = new Token(c, "Símbolo especial", j + 1, i - pal.length() + 1);
                        T[t++] = new Token(cad.substring(i + 1), "Símbolo especial", j + 1, i + 2 - pal.length());
                        i++;
                    } else if (esSim(c) != -1) {
                        T[t++] = new Token(c, "Símbolo especial", j + 1, i - pal.length() + 1);
                    }

                    pal = "";
                }
            }
        }

        String txt = "";
        for (int i = 0; i < t; i++) {
            if (!T[i].getTipo().equals("Error")) {
                txt = txt + "[" + T[i] + "]\n";
            }
            txtPToken.setText(txt);
        }

    }

    protected static void escError(int l, int c, String msg, Token[] t, int i) {
        String txt = txtPErrores.getText();
        String tipo = gram(msg);

        if (msg.equals("Error en la definición del número o identificador.") || msg.equals("Valor incompatible.") || msg.equals("Identificador no encontrado.") || msg.equals("Identificador incompatible.")) {
            txt = txt + "E.L. - Linea:" + l + " Caracter:" + c + "\n" + msg + "\n";
        } else {
            txt = txt + "E.S. - Linea:" + l + " Caracter:" + c + "\n" + msg + "\n";
        }
        txtPErrores.setText(txt);

        txtPErrores.add(new Vinculo(350, y, tipo, t, i));
        y += 50;
    }

    protected static void escError(int l, int c, String msg, Token[] t, int i, String tipo) {
        String txt = txtPErrores.getText();

        txt = txt + "E.S. - Linea:" + l + " Caracter:" + c + "\n" + msg + "\n";
        txtPErrores.setText(txt);

        txtPErrores.add(new Vinculo(350, y, tipo, t, i));
        y += 50;
    }

    private static String gram(String msg) {
        if (msg.equals("Error en la definición del número o identificador.")) {
            return "Identificador";
        } else if (msg.equals("Parámetros incorrectos.") || msg.equals("Falta paréntesis que abre.") || msg.equals("Falta paréntesis que cierra.")) {
            return "Alexa";
        } else if (msg.equals("Asignación incorrecta.")) {
            return "Asignación";
        } else if (msg.equals("Declaración incorrecta.") || msg.equals("Valor incompatible.")) {
            return "Declaración";
        }

        return "";
    }

    private boolean hayPyC(Token t) {
        if (t.getTk().equals(";")) {
            return true;
        } else {
            escError(t.getLinea(), t.getCaracter(), "Falta punto y coma.", T, 0);
            return false;
        }
    }

    private int esOp(String op) {
        String OP[] = {"=", "+", "-", "*", "/"};
        for (int i = 0; i < OP.length; i++) {
            if (op.equals(OP[i])) {
                return i;
            }
        }
        return -1;
    }

    private boolean esOperando(Token t) {
        return esOp(t.getTk()) == -1;
    }

    private boolean mayPrioridad(Token a, Token b) {
        return esOp(a.getTk()) < esOp(b.getTk());
    }

    private int hayOp0() {
        for (int i = 0; i < t; i++) {
            if (T[i].getTk().equals("=")) {
                return i;
            }
        }
        return -1;
    }

    private boolean esPR(String p) {
        String palres[] = {"Alexa", "IniciarPrograma", "TerminarPrograma", "null", "limpiar", "prende", "prender", "apagar", "encender", "enciende", "apaga", "llena", "llenar", "lanzar",
            "lanza", "dispensa", "dispensar", "sirve", "servir", "echar", "echa", "cierra", "cerrar", "abir", "abre", "estado", "temperatura",
            "aumentar", "disminuir", "camara", "bocina", "aspersor", "aspersores", "emite", "reproducir", "reproduce",
            "int", "float", "boolean", "for", "while", "if", "else", "public", "private", "void", "static",
            "break", "catch", "try", "class", "default", "exports", "extends", "implements", "import", "interface", "new", "return", "super",
            "this", "luz", "puerta", "juguete", "premio"};
        for (int i = 0; i < palres.length; i++) {
            if (p.equals(palres[i])) {
                return true;
            }
        }
        return false;
    }

    private int esSim(String p) {
        String simEsp[] = {"(", ")", "{", "}", "[", "]", "|", "&", "!", "<", ">", ",", ";", ":", "#", "\""};
        for (int i = 0; i < simEsp.length; i++) {
            if (p.equals(simEsp[i])) {
                return i;
            }
        }
        return -1;
    }

    private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            //  \\W = [A-Za-Z0-9]
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    //METODO PARA ENCONTRAR LAS PRIMERAS CADENAS 
    private int findFirstNonWordChar(String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }

    private void colores() {

        final StyleContext cont = StyleContext.getDefaultStyleContext();

        //COLORES 
        final AttributeSet attorange = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 105, 0));
        final AttributeSet attgreen = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 255, 54));
        final AttributeSet attblue = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 147, 255));
        final AttributeSet attblack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0));

        //STYLO 
        DefaultStyledDocument doc = new DefaultStyledDocument() {
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offset, str, a);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                if (before < 0) {
                    before = 0;
                }
                int after = findFirstNonWordChar(text, offset + str.length());
                int wordL = before;
                int wordR = before;

                while (wordR <= after) {
                    if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
                        if (text.substring(wordL, wordR).matches("(\\W)*(Alexa|IniciarPrograma|TerminarPrograma|null|limpiar|prende|prender|apagar|encender|enciende|apaga|llena|llenar|lanzar|lanza|dispensa|dispensar|sirve|servir|echar|echa|cierra|cerrar|abir|abre|estado|temperatura|aumentar|disminuir|emite|reproducir|reproduce|for|while|if|else|public|private|void|static|break|catch|try|class|default|new|return|this)")) {
                            setCharacterAttributes(wordL, wordR - wordL, attblue, false);
                        } else if (text.substring(wordL, wordR).matches("(\\W)*(int|float|boolean|string|camara|bocina|aspersor|luz|true|false|puerta|juguete|premio)")) {
                            setCharacterAttributes(wordL, wordR - wordL, attgreen, false);
                        } else if (text.substring(wordL, wordR).matches("(\\W)*" + (char) 35 + "(.|\\b|\\s)*")) {
                            setCharacterAttributes(wordL, wordR - wordL, attorange, false);
                        } else {
                            setCharacterAttributes(wordL, wordR - wordL, attblack, false);
                        }
                        wordL = wordR;
                    }
                    wordR++;
                }
            }

            public void romeve(int offs, int len) throws BadLocationException {
                super.remove(offs, len);

                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                if (before < 0) {
                    before = 0;
                }
            }
        };

        JTextPane txt = new JTextPane(doc);
        String temp = txtPEditor.getText();
        txtPEditor.setStyledDocument(txt.getStyledDocument());
        txtPEditor.setText(temp);

    }

    public static int exiId(String id) {
        int i = 0;
        try {
            while (!I[i].equals("null")) {
                if (I[i].getId().equals(id)) {
                    return i;
                }
                i++;
            }
        } catch (NullPointerException e) {
            return -1;
        }
        return -1;
    }

    public void llaves(Token[] t, int ini, int tope) {
        while (ini < tope && t[ini] != null) {
            if (t[ini].getTk().equals("{")) {
                llavesR(t, ini + 1, tope);
            }
            ini++;
        }
    }

    public int llavesR(Token[] t, int ini, int tope) {
        int llave = ini - 1;

        while (ini < tope && t[ini] != null) {
            if (t[ini].getTk().equals("{")) {
                ini = llavesR(t, ini + 1, tope);
            } else if (t[ini].getTk().equals("}")) {
                return ini;
            }
            ini++;
        }
        escError(t[llave].getLinea(), t[llave].getCaracter(), "Falta cerrar llaves.", t, 0);
        return ini;
    }

    public void llaves2(Token[] t, int ini, int tope) {
        while (tope > 0 && t[ini] != null) {
            if (t[tope].getTk().equals("}")) {
                llavesR2(t, tope, tope - 1);
            }
            tope--;
        }
    }

    public int llavesR2(Token[] t, int lla, int tope) {
        int llave = lla;

        while (tope > 0 && t[tope] != null) {
            if (t[tope].getTk().equals("}")) {
                tope = llavesR2(t, tope, tope - 1);
            } else if (t[tope].getTk().equals("{")) {
                return tope;
            }
            tope--;
        }
        escError(t[llave].getLinea(), t[llave].getCaracter(), "Falta abrir llaves.", t, 0);
        return tope;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    private Token T[] = new Token[10000];
    protected static Identificador I[] = new Identificador[10000];
    protected static int j, y = 0;
    private int t = 0;
    private String archivo = "Archivo.txt";
    private NumeroLinea NumLinea;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAnaLex;
    private javax.swing.JButton btnAnaSin;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarC;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem mnuAbrir;
    private javax.swing.JMenuItem mnuCerrar;
    private javax.swing.JMenuItem mnuGuardar;
    private javax.swing.JMenuItem mnuGuardarC;
    private javax.swing.JMenuItem mnuLex;
    private javax.swing.JMenuItem mnuNuevo;
    private javax.swing.JMenuItem mnuSin;
    private javax.swing.JPanel pnlPrinc;
    private javax.swing.JScrollPane spnlEditor;
    private javax.swing.JScrollPane spnlErrores;
    private javax.swing.JScrollPane spnlToken;
    private javax.swing.JTextField txtErrores;
    private javax.swing.JTextPane txtPEditor;
    protected static final javax.swing.JTextPane txtPErrores = new javax.swing.JTextPane();
    private javax.swing.JTextPane txtPToken;
    private javax.swing.JTextField txtToken;
    // End of variables declaration//GEN-END:variables

    static VoiceManager vocesI;
    static Voice Voz;

    public static void hablar(String M) {
        System.setProperty("mbrola.base", "/mbrola/mbrola");
        vocesI = VoiceManager.getInstance();
        Voz = vocesI.getVoice("mbrola_us1");
        Voz.allocate();
        Voz.speak(M);
    }

}
